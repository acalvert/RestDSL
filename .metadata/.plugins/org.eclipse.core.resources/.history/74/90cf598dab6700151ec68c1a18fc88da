package edu.auburn.oaccrefac.internal.ui.refactorings;

import java.util.LinkedList;
import java.util.List;

import org.eclipse.cdt.core.dom.ast.IASTNodeSelector;
import org.eclipse.cdt.core.dom.ast.IASTStatement;
import org.eclipse.cdt.core.dom.ast.IASTTranslationUnit;
import org.eclipse.cdt.core.model.ICElement;
import org.eclipse.cdt.core.model.ICProject;
import org.eclipse.cdt.internal.ui.refactoring.CRefactoring;
import org.eclipse.cdt.internal.ui.refactoring.ModificationCollector;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.OperationCanceledException;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.ltk.core.refactoring.RefactoringDescriptor;
import org.eclipse.ltk.core.refactoring.RefactoringStatus;
import org.eclipse.ltk.core.refactoring.participants.CheckConditionsContext;

import edu.auburn.oaccrefac.internal.core.ASTUtil;

@SuppressWarnings("restriction")
public class SourceStatementsRefactoring extends CRefactoring {

    private IASTTranslationUnit ast;
    private IASTStatement[] statements;
    
    public SourceStatementsRefactoring(ICElement element, ISelection selection, ICProject project) {
        super(element, selection, project);
    }
    
    @Override
    public RefactoringStatus checkInitialConditions(IProgressMonitor pm) throws CoreException ,OperationCanceledException {
        if (initStatus.hasFatalError()) {
            return initStatus;
        }
        
        ast = getAST(tu, pm);
        
        pm.subTask("Checking initial conditions...");
        doCheckInitialConditions(initStatus, pm);
        return initStatus;
    }
    
    @Override
    protected RefactoringStatus checkFinalConditions(IProgressMonitor pm, CheckConditionsContext checkContext)
            throws CoreException, OperationCanceledException {
        RefactoringStatus result = new RefactoringStatus();
        pm.subTask("Determining if transformation can be safely performed...");
        doCheckFinalConditions(result, pm);
        return result;
    }

    protected void doCheckInitialConditions(RefactoringStatus status, IProgressMonitor pm) {
    }

    protected void doCheckFinalConditions(RefactoringStatus status, IProgressMonitor pm) {
    }

    @Override
    protected RefactoringDescriptor getRefactoringDescriptor() {
        // TODO Auto-generated method stub
        return null;
    }

    @Override
    protected void collectModifications(IProgressMonitor pm, ModificationCollector collector)
            throws CoreException, OperationCanceledException {
        // TODO Auto-generated method stub
    }
    
    private IASTStatement[] getStatements() {
        List<IASTStatement> statements = new LinkedList<IASTStatement>();
        List<IASTStatement> all = ASTUtil.find(ast, IASTStatement.class);
        int begin = selectedRegion.getOffset();
        int end = selectedRegion.getLength() + begin;
        
        for(IASTStatement stmt : all) {
            int stmtBegin = stmt.getFileLocation().getNodeOffset();
            int stmtEnd = stmtBegin + stmt.getFileLocation().getNodeLength();
            if(stmtBegin < end) {
                
            }
        }
       
    }

}
