grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.common.Terminals

generate myDsl "http://www.xtext.org/example/mydsl/MyDsl"

import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase

DomainModel:
	(elements += Type)*
	(apis += RestAPI)*
;
	
Type:
	PrimitiveType | DataModel | RestModel | MappingModel
;

RestAPI:
	(resource = Resource)
	(service += Service)*
	(dao += DataAccessObject)*
;

PrimitiveType:
	'primitiveType' name = ID
;

DataModel:
	'dataModel' name = ID ('extends' superType = [DataModel])? '{'
		(features += Feature)*
	'}'
;

RestModel:
	'restModel' name = ID ('extends' superType = [RestModel])? '{'
		(features += Feature)*
	'}'
;

MappingModel:
	'mappingModel' name = ID '{'
		(transformation += Transformation)*
	'}'
;

Transformation:
	'(' (dataModel = [DataModel]) '<=>' (restModel = [RestModel]) ')'
;

Feature:
	(many ?= 'many')? name = ID ':' type = [Type]
;

Resource:
	'Resource' name = ID 
	'create' '(' createRestModel = [RestModel] ')' 'throws' exception1 = RestException '{'
		(createMethod = Block)
		'return' createdRestModel = [RestModel]
	'}'
	'find' '(' findby = INTEGER ')' 'throws' exception2 = RestException '{' 
		(findMethod = Block)
		'return' foundRestModel = [RestModel]
	'}'
	'update' '(' updateby = INTEGER ',' updateRestModel = [RestModel] ')' 'throws' exception3 = RestException  '{'
		(updateMethod = Block)
		'return' updatedRestModel = [RestModel]
	'}'
	'delete' '(' deleteby = INTEGER ')' 'throws' exception4 = RestException '{'
		(deleteMethod = Block)
	'}'
;

Service:
	'Service' name = ID 
	'create' '(' createDataModel = [DataModel] ')' 'throws' exception1 = RestException '{'
		(createMethod = Block)
		'return' createdDataModel = [DataModel]
	'}'
	'find' '(' findby = INTEGER ')' 'throws' exception2 = RestException '{' 
		(findMethod = Block)
		'return' foundDataModel = [DataModel]
	'}'
	'update' '(' updateby = INTEGER ',' updateDataModel = [DataModel] ')' 'throws' exception3 = RestException  '{'
		(updateMethod = Block)
		'return' updatedDataModel = [DataModel]
	'}'
	'delete' '(' deleteby = INTEGER ')' 'throws' exception4 = RestException '{'
		(deleteMethod = Block)
	'}'
;

DataAccessObject:
	'DAO' name = ID 
	'create' '(' createDataModel = [DataModel] ')' 'throws' exception1 = RestException '{'
		(createMethod = Block)
		'return' createdDataModel = [DataModel]
	'}'
	'find' '(' findby = INTEGER ')' 'throws' exception2 = RestException '{' 
		(findMethod = Block)
		'return' foundDataModel = [DataModel]
	'}'
	'update' '(' updateby = INTEGER ',' updateDataModel = [DataModel] ')' 'throws' exception3 = RestException  '{'
		(updateMethod = Block)
		'return' updatedDataModel = [DataModel]
	'}'
	'delete' '(' deleteby = INTEGER ')' 'throws' exception4 = RestException '{'
		(deleteMethod = Block)
	'}'
;

RestException:
	statusCode = RestStatusCode
;

terminal INTEGER:
	('0'..'9')+
;

enum RestStatusCode:
	INFORMATIONAL = 'INFORMATIONAL' |
	SUCCESS = 'SUCCESS' |
	REDIRECTION = 'REDIRECTION' |
	CLIENT_ERROR = 'CLIENT_ERROR' |
	SERVER_ERROR = 'SERVER_ERROR' |
	NETWORK_ERROR = 'NETWORK_ERROR'
;

Block:
	//will be expanded later to include actual Java syntax for a block of statements
	//<block> ::= { <block-statements>? }
	code = STRING
;


