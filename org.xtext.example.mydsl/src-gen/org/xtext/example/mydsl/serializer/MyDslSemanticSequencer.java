/*
 * generated by Xtext
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.myDsl.DataAccessObject;
import org.xtext.example.mydsl.myDsl.DataModel;
import org.xtext.example.mydsl.myDsl.DomainModel;
import org.xtext.example.mydsl.myDsl.Feature;
import org.xtext.example.mydsl.myDsl.JavaMethod;
import org.xtext.example.mydsl.myDsl.MappingModel;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.PrimitiveType;
import org.xtext.example.mydsl.myDsl.Resource;
import org.xtext.example.mydsl.myDsl.RestAPI;
import org.xtext.example.mydsl.myDsl.RestException;
import org.xtext.example.mydsl.myDsl.RestModel;
import org.xtext.example.mydsl.myDsl.Service;
import org.xtext.example.mydsl.myDsl.Transformation;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == MyDslPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case MyDslPackage.DATA_ACCESS_OBJECT:
				sequence_DataAccessObject(context, (DataAccessObject) semanticObject); 
				return; 
			case MyDslPackage.DATA_MODEL:
				sequence_DataModel(context, (DataModel) semanticObject); 
				return; 
			case MyDslPackage.DOMAIN_MODEL:
				sequence_DomainModel(context, (DomainModel) semanticObject); 
				return; 
			case MyDslPackage.FEATURE:
				sequence_Feature(context, (Feature) semanticObject); 
				return; 
			case MyDslPackage.JAVA_METHOD:
				sequence_JavaMethod(context, (JavaMethod) semanticObject); 
				return; 
			case MyDslPackage.MAPPING_MODEL:
				sequence_MappingModel(context, (MappingModel) semanticObject); 
				return; 
			case MyDslPackage.PRIMITIVE_TYPE:
				sequence_PrimitiveType(context, (PrimitiveType) semanticObject); 
				return; 
			case MyDslPackage.RESOURCE:
				sequence_Resource(context, (Resource) semanticObject); 
				return; 
			case MyDslPackage.REST_API:
				sequence_RestAPI(context, (RestAPI) semanticObject); 
				return; 
			case MyDslPackage.REST_EXCEPTION:
				sequence_RestException(context, (RestException) semanticObject); 
				return; 
			case MyDslPackage.REST_MODEL:
				sequence_RestModel(context, (RestModel) semanticObject); 
				return; 
			case MyDslPackage.SERVICE:
				sequence_Service(context, (Service) semanticObject); 
				return; 
			case MyDslPackage.TRANSFORMATION:
				sequence_Transformation(context, (Transformation) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         createDataModel=[DataModel|ID] 
	 *         exception1=RestException 
	 *         createMethod=JavaMethod 
	 *         createdDataModel=[DataModel|ID] 
	 *         findby=INTEGER 
	 *         exception2=RestException 
	 *         findMethod=JavaMethod 
	 *         foundDataModel=[DataModel|ID] 
	 *         updateby=INTEGER 
	 *         updateDataModel=[DataModel|ID] 
	 *         exception3=RestException 
	 *         updateMethod=JavaMethod 
	 *         updatedDataModel=[DataModel|ID] 
	 *         deleteby=INTEGER 
	 *         exception4=RestException 
	 *         deleteMethod=JavaMethod
	 *     )
	 */
	protected void sequence_DataAccessObject(EObject context, DataAccessObject semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.DATA_ACCESS_OBJECT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.DATA_ACCESS_OBJECT__NAME));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.DATA_ACCESS_OBJECT__CREATE_DATA_MODEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.DATA_ACCESS_OBJECT__CREATE_DATA_MODEL));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.DATA_ACCESS_OBJECT__EXCEPTION1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.DATA_ACCESS_OBJECT__EXCEPTION1));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.DATA_ACCESS_OBJECT__CREATE_METHOD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.DATA_ACCESS_OBJECT__CREATE_METHOD));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.DATA_ACCESS_OBJECT__CREATED_DATA_MODEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.DATA_ACCESS_OBJECT__CREATED_DATA_MODEL));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.DATA_ACCESS_OBJECT__FINDBY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.DATA_ACCESS_OBJECT__FINDBY));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.DATA_ACCESS_OBJECT__EXCEPTION2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.DATA_ACCESS_OBJECT__EXCEPTION2));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.DATA_ACCESS_OBJECT__FIND_METHOD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.DATA_ACCESS_OBJECT__FIND_METHOD));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.DATA_ACCESS_OBJECT__FOUND_DATA_MODEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.DATA_ACCESS_OBJECT__FOUND_DATA_MODEL));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.DATA_ACCESS_OBJECT__UPDATEBY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.DATA_ACCESS_OBJECT__UPDATEBY));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.DATA_ACCESS_OBJECT__UPDATE_DATA_MODEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.DATA_ACCESS_OBJECT__UPDATE_DATA_MODEL));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.DATA_ACCESS_OBJECT__EXCEPTION3) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.DATA_ACCESS_OBJECT__EXCEPTION3));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.DATA_ACCESS_OBJECT__UPDATE_METHOD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.DATA_ACCESS_OBJECT__UPDATE_METHOD));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.DATA_ACCESS_OBJECT__UPDATED_DATA_MODEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.DATA_ACCESS_OBJECT__UPDATED_DATA_MODEL));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.DATA_ACCESS_OBJECT__DELETEBY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.DATA_ACCESS_OBJECT__DELETEBY));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.DATA_ACCESS_OBJECT__EXCEPTION4) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.DATA_ACCESS_OBJECT__EXCEPTION4));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.DATA_ACCESS_OBJECT__DELETE_METHOD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.DATA_ACCESS_OBJECT__DELETE_METHOD));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getDataAccessObjectAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getDataAccessObjectAccess().getCreateDataModelDataModelIDTerminalRuleCall_4_0_1(), semanticObject.getCreateDataModel());
		feeder.accept(grammarAccess.getDataAccessObjectAccess().getException1RestExceptionParserRuleCall_7_0(), semanticObject.getException1());
		feeder.accept(grammarAccess.getDataAccessObjectAccess().getCreateMethodJavaMethodParserRuleCall_9_0(), semanticObject.getCreateMethod());
		feeder.accept(grammarAccess.getDataAccessObjectAccess().getCreatedDataModelDataModelIDTerminalRuleCall_11_0_1(), semanticObject.getCreatedDataModel());
		feeder.accept(grammarAccess.getDataAccessObjectAccess().getFindbyINTEGERTerminalRuleCall_15_0(), semanticObject.getFindby());
		feeder.accept(grammarAccess.getDataAccessObjectAccess().getException2RestExceptionParserRuleCall_18_0(), semanticObject.getException2());
		feeder.accept(grammarAccess.getDataAccessObjectAccess().getFindMethodJavaMethodParserRuleCall_20_0(), semanticObject.getFindMethod());
		feeder.accept(grammarAccess.getDataAccessObjectAccess().getFoundDataModelDataModelIDTerminalRuleCall_22_0_1(), semanticObject.getFoundDataModel());
		feeder.accept(grammarAccess.getDataAccessObjectAccess().getUpdatebyINTEGERTerminalRuleCall_26_0(), semanticObject.getUpdateby());
		feeder.accept(grammarAccess.getDataAccessObjectAccess().getUpdateDataModelDataModelIDTerminalRuleCall_28_0_1(), semanticObject.getUpdateDataModel());
		feeder.accept(grammarAccess.getDataAccessObjectAccess().getException3RestExceptionParserRuleCall_31_0(), semanticObject.getException3());
		feeder.accept(grammarAccess.getDataAccessObjectAccess().getUpdateMethodJavaMethodParserRuleCall_33_0(), semanticObject.getUpdateMethod());
		feeder.accept(grammarAccess.getDataAccessObjectAccess().getUpdatedDataModelDataModelIDTerminalRuleCall_35_0_1(), semanticObject.getUpdatedDataModel());
		feeder.accept(grammarAccess.getDataAccessObjectAccess().getDeletebyINTEGERTerminalRuleCall_39_0(), semanticObject.getDeleteby());
		feeder.accept(grammarAccess.getDataAccessObjectAccess().getException4RestExceptionParserRuleCall_42_0(), semanticObject.getException4());
		feeder.accept(grammarAccess.getDataAccessObjectAccess().getDeleteMethodJavaMethodParserRuleCall_44_0(), semanticObject.getDeleteMethod());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID superType=[DataModel|ID]? features+=Feature*)
	 */
	protected void sequence_DataModel(EObject context, DataModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (elements+=Type* apis+=RestAPI*)
	 */
	protected void sequence_DomainModel(EObject context, DomainModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (many?='many'? name=ID type=[Type|ID])
	 */
	protected void sequence_Feature(EObject context, Feature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     code=STRING
	 */
	protected void sequence_JavaMethod(EObject context, JavaMethod semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.JAVA_METHOD__CODE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.JAVA_METHOD__CODE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getJavaMethodAccess().getCodeSTRINGTerminalRuleCall_0(), semanticObject.getCode());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID transformation+=Transformation*)
	 */
	protected void sequence_MappingModel(EObject context, MappingModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_PrimitiveType(EObject context, PrimitiveType semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.TYPE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.TYPE__NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getPrimitiveTypeAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         createRestModel=[RestModel|ID] 
	 *         exception1=RestException 
	 *         createMethod=JavaMethod 
	 *         createdRestModel=[RestModel|ID] 
	 *         findby=INTEGER 
	 *         exception2=RestException 
	 *         findMethod=JavaMethod 
	 *         foundRestModel=[RestModel|ID] 
	 *         updateby=INTEGER 
	 *         updateRestModel=[RestModel|ID] 
	 *         exception3=RestException 
	 *         updateMethod=JavaMethod 
	 *         updatedRestModel=[RestModel|ID] 
	 *         deleteby=INTEGER 
	 *         exception4=RestException 
	 *         deleteMethod=JavaMethod
	 *     )
	 */
	protected void sequence_Resource(EObject context, Resource semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.RESOURCE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.RESOURCE__NAME));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.RESOURCE__CREATE_REST_MODEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.RESOURCE__CREATE_REST_MODEL));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.RESOURCE__EXCEPTION1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.RESOURCE__EXCEPTION1));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.RESOURCE__CREATE_METHOD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.RESOURCE__CREATE_METHOD));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.RESOURCE__CREATED_REST_MODEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.RESOURCE__CREATED_REST_MODEL));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.RESOURCE__FINDBY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.RESOURCE__FINDBY));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.RESOURCE__EXCEPTION2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.RESOURCE__EXCEPTION2));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.RESOURCE__FIND_METHOD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.RESOURCE__FIND_METHOD));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.RESOURCE__FOUND_REST_MODEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.RESOURCE__FOUND_REST_MODEL));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.RESOURCE__UPDATEBY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.RESOURCE__UPDATEBY));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.RESOURCE__UPDATE_REST_MODEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.RESOURCE__UPDATE_REST_MODEL));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.RESOURCE__EXCEPTION3) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.RESOURCE__EXCEPTION3));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.RESOURCE__UPDATE_METHOD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.RESOURCE__UPDATE_METHOD));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.RESOURCE__UPDATED_REST_MODEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.RESOURCE__UPDATED_REST_MODEL));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.RESOURCE__DELETEBY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.RESOURCE__DELETEBY));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.RESOURCE__EXCEPTION4) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.RESOURCE__EXCEPTION4));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.RESOURCE__DELETE_METHOD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.RESOURCE__DELETE_METHOD));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getResourceAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getResourceAccess().getCreateRestModelRestModelIDTerminalRuleCall_4_0_1(), semanticObject.getCreateRestModel());
		feeder.accept(grammarAccess.getResourceAccess().getException1RestExceptionParserRuleCall_7_0(), semanticObject.getException1());
		feeder.accept(grammarAccess.getResourceAccess().getCreateMethodJavaMethodParserRuleCall_9_0(), semanticObject.getCreateMethod());
		feeder.accept(grammarAccess.getResourceAccess().getCreatedRestModelRestModelIDTerminalRuleCall_11_0_1(), semanticObject.getCreatedRestModel());
		feeder.accept(grammarAccess.getResourceAccess().getFindbyINTEGERTerminalRuleCall_15_0(), semanticObject.getFindby());
		feeder.accept(grammarAccess.getResourceAccess().getException2RestExceptionParserRuleCall_18_0(), semanticObject.getException2());
		feeder.accept(grammarAccess.getResourceAccess().getFindMethodJavaMethodParserRuleCall_20_0(), semanticObject.getFindMethod());
		feeder.accept(grammarAccess.getResourceAccess().getFoundRestModelRestModelIDTerminalRuleCall_22_0_1(), semanticObject.getFoundRestModel());
		feeder.accept(grammarAccess.getResourceAccess().getUpdatebyINTEGERTerminalRuleCall_26_0(), semanticObject.getUpdateby());
		feeder.accept(grammarAccess.getResourceAccess().getUpdateRestModelRestModelIDTerminalRuleCall_28_0_1(), semanticObject.getUpdateRestModel());
		feeder.accept(grammarAccess.getResourceAccess().getException3RestExceptionParserRuleCall_31_0(), semanticObject.getException3());
		feeder.accept(grammarAccess.getResourceAccess().getUpdateMethodJavaMethodParserRuleCall_33_0(), semanticObject.getUpdateMethod());
		feeder.accept(grammarAccess.getResourceAccess().getUpdatedRestModelRestModelIDTerminalRuleCall_35_0_1(), semanticObject.getUpdatedRestModel());
		feeder.accept(grammarAccess.getResourceAccess().getDeletebyINTEGERTerminalRuleCall_39_0(), semanticObject.getDeleteby());
		feeder.accept(grammarAccess.getResourceAccess().getException4RestExceptionParserRuleCall_42_0(), semanticObject.getException4());
		feeder.accept(grammarAccess.getResourceAccess().getDeleteMethodJavaMethodParserRuleCall_44_0(), semanticObject.getDeleteMethod());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (resource=Resource service+=Service* dao+=DataAccessObject*)
	 */
	protected void sequence_RestAPI(EObject context, RestAPI semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     statusCode=RestStatusCode
	 */
	protected void sequence_RestException(EObject context, RestException semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.REST_EXCEPTION__STATUS_CODE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.REST_EXCEPTION__STATUS_CODE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getRestExceptionAccess().getStatusCodeRestStatusCodeEnumRuleCall_0(), semanticObject.getStatusCode());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID superType=[RestModel|ID]? features+=Feature*)
	 */
	protected void sequence_RestModel(EObject context, RestModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         createDataModel=[DataModel|ID] 
	 *         exception1=RestException 
	 *         createMethod=JavaMethod 
	 *         createdDataModel=[DataModel|ID] 
	 *         findby=INTEGER 
	 *         exception2=RestException 
	 *         findMethod=JavaMethod 
	 *         foundDataModel=[DataModel|ID] 
	 *         updateby=INTEGER 
	 *         updateDataModel=[DataModel|ID] 
	 *         exception3=RestException 
	 *         updateMethod=JavaMethod 
	 *         updatedDataModel=[DataModel|ID] 
	 *         deleteby=INTEGER 
	 *         exception4=RestException 
	 *         deleteMethod=JavaMethod
	 *     )
	 */
	protected void sequence_Service(EObject context, Service semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.SERVICE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.SERVICE__NAME));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.SERVICE__CREATE_DATA_MODEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.SERVICE__CREATE_DATA_MODEL));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.SERVICE__EXCEPTION1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.SERVICE__EXCEPTION1));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.SERVICE__CREATE_METHOD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.SERVICE__CREATE_METHOD));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.SERVICE__CREATED_DATA_MODEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.SERVICE__CREATED_DATA_MODEL));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.SERVICE__FINDBY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.SERVICE__FINDBY));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.SERVICE__EXCEPTION2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.SERVICE__EXCEPTION2));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.SERVICE__FIND_METHOD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.SERVICE__FIND_METHOD));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.SERVICE__FOUND_DATA_MODEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.SERVICE__FOUND_DATA_MODEL));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.SERVICE__UPDATEBY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.SERVICE__UPDATEBY));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.SERVICE__UPDATE_DATA_MODEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.SERVICE__UPDATE_DATA_MODEL));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.SERVICE__EXCEPTION3) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.SERVICE__EXCEPTION3));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.SERVICE__UPDATE_METHOD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.SERVICE__UPDATE_METHOD));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.SERVICE__UPDATED_DATA_MODEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.SERVICE__UPDATED_DATA_MODEL));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.SERVICE__DELETEBY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.SERVICE__DELETEBY));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.SERVICE__EXCEPTION4) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.SERVICE__EXCEPTION4));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.SERVICE__DELETE_METHOD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.SERVICE__DELETE_METHOD));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getServiceAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getServiceAccess().getCreateDataModelDataModelIDTerminalRuleCall_4_0_1(), semanticObject.getCreateDataModel());
		feeder.accept(grammarAccess.getServiceAccess().getException1RestExceptionParserRuleCall_7_0(), semanticObject.getException1());
		feeder.accept(grammarAccess.getServiceAccess().getCreateMethodJavaMethodParserRuleCall_9_0(), semanticObject.getCreateMethod());
		feeder.accept(grammarAccess.getServiceAccess().getCreatedDataModelDataModelIDTerminalRuleCall_11_0_1(), semanticObject.getCreatedDataModel());
		feeder.accept(grammarAccess.getServiceAccess().getFindbyINTEGERTerminalRuleCall_15_0(), semanticObject.getFindby());
		feeder.accept(grammarAccess.getServiceAccess().getException2RestExceptionParserRuleCall_18_0(), semanticObject.getException2());
		feeder.accept(grammarAccess.getServiceAccess().getFindMethodJavaMethodParserRuleCall_20_0(), semanticObject.getFindMethod());
		feeder.accept(grammarAccess.getServiceAccess().getFoundDataModelDataModelIDTerminalRuleCall_22_0_1(), semanticObject.getFoundDataModel());
		feeder.accept(grammarAccess.getServiceAccess().getUpdatebyINTEGERTerminalRuleCall_26_0(), semanticObject.getUpdateby());
		feeder.accept(grammarAccess.getServiceAccess().getUpdateDataModelDataModelIDTerminalRuleCall_28_0_1(), semanticObject.getUpdateDataModel());
		feeder.accept(grammarAccess.getServiceAccess().getException3RestExceptionParserRuleCall_31_0(), semanticObject.getException3());
		feeder.accept(grammarAccess.getServiceAccess().getUpdateMethodJavaMethodParserRuleCall_33_0(), semanticObject.getUpdateMethod());
		feeder.accept(grammarAccess.getServiceAccess().getUpdatedDataModelDataModelIDTerminalRuleCall_35_0_1(), semanticObject.getUpdatedDataModel());
		feeder.accept(grammarAccess.getServiceAccess().getDeletebyINTEGERTerminalRuleCall_39_0(), semanticObject.getDeleteby());
		feeder.accept(grammarAccess.getServiceAccess().getException4RestExceptionParserRuleCall_42_0(), semanticObject.getException4());
		feeder.accept(grammarAccess.getServiceAccess().getDeleteMethodJavaMethodParserRuleCall_44_0(), semanticObject.getDeleteMethod());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (dataModel=[DataModel|ID] restModel=[RestModel|ID])
	 */
	protected void sequence_Transformation(EObject context, Transformation semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.TRANSFORMATION__DATA_MODEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.TRANSFORMATION__DATA_MODEL));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.TRANSFORMATION__REST_MODEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.TRANSFORMATION__REST_MODEL));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getTransformationAccess().getDataModelDataModelIDTerminalRuleCall_1_0_1(), semanticObject.getDataModel());
		feeder.accept(grammarAccess.getTransformationAccess().getRestModelRestModelIDTerminalRuleCall_3_0_1(), semanticObject.getRestModel());
		feeder.finish();
	}
}
