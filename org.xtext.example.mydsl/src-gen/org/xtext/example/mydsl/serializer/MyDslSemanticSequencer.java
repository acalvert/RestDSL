/*
 * generated by Xtext
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.myDsl.BaseException;
import org.xtext.example.mydsl.myDsl.Block;
import org.xtext.example.mydsl.myDsl.DataAccessObject;
import org.xtext.example.mydsl.myDsl.DataModel;
import org.xtext.example.mydsl.myDsl.DataModelMethodConclusion;
import org.xtext.example.mydsl.myDsl.DomainModel;
import org.xtext.example.mydsl.myDsl.ExceptionMapper;
import org.xtext.example.mydsl.myDsl.Feature;
import org.xtext.example.mydsl.myDsl.ModelMapper;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.PrimitiveType;
import org.xtext.example.mydsl.myDsl.Resource;
import org.xtext.example.mydsl.myDsl.RestAPI;
import org.xtext.example.mydsl.myDsl.RestException;
import org.xtext.example.mydsl.myDsl.RestExceptionList;
import org.xtext.example.mydsl.myDsl.RestModel;
import org.xtext.example.mydsl.myDsl.RestModelMethodConclusion;
import org.xtext.example.mydsl.myDsl.Service;
import org.xtext.example.mydsl.myDsl.Transformation;
import org.xtext.example.mydsl.myDsl.ValidationService;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == MyDslPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case MyDslPackage.BASE_EXCEPTION:
				sequence_BaseException(context, (BaseException) semanticObject); 
				return; 
			case MyDslPackage.BLOCK:
				sequence_Block(context, (Block) semanticObject); 
				return; 
			case MyDslPackage.DATA_ACCESS_OBJECT:
				sequence_DataAccessObject(context, (DataAccessObject) semanticObject); 
				return; 
			case MyDslPackage.DATA_MODEL:
				sequence_DataModel(context, (DataModel) semanticObject); 
				return; 
			case MyDslPackage.DATA_MODEL_METHOD_CONCLUSION:
				sequence_DataModelMethodConclusion(context, (DataModelMethodConclusion) semanticObject); 
				return; 
			case MyDslPackage.DOMAIN_MODEL:
				sequence_DomainModel(context, (DomainModel) semanticObject); 
				return; 
			case MyDslPackage.EXCEPTION_MAPPER:
				sequence_ExceptionMapper(context, (ExceptionMapper) semanticObject); 
				return; 
			case MyDslPackage.FEATURE:
				sequence_Feature(context, (Feature) semanticObject); 
				return; 
			case MyDslPackage.MODEL_MAPPER:
				sequence_ModelMapper(context, (ModelMapper) semanticObject); 
				return; 
			case MyDslPackage.PRIMITIVE_TYPE:
				sequence_PrimitiveType(context, (PrimitiveType) semanticObject); 
				return; 
			case MyDslPackage.RESOURCE:
				sequence_Resource(context, (Resource) semanticObject); 
				return; 
			case MyDslPackage.REST_API:
				sequence_RestAPI(context, (RestAPI) semanticObject); 
				return; 
			case MyDslPackage.REST_EXCEPTION:
				sequence_RestException(context, (RestException) semanticObject); 
				return; 
			case MyDslPackage.REST_EXCEPTION_LIST:
				sequence_RestExceptionList(context, (RestExceptionList) semanticObject); 
				return; 
			case MyDslPackage.REST_MODEL:
				sequence_RestModel(context, (RestModel) semanticObject); 
				return; 
			case MyDslPackage.REST_MODEL_METHOD_CONCLUSION:
				sequence_RestModelMethodConclusion(context, (RestModelMethodConclusion) semanticObject); 
				return; 
			case MyDslPackage.SERVICE:
				sequence_Service(context, (Service) semanticObject); 
				return; 
			case MyDslPackage.TRANSFORMATION:
				sequence_Transformation(context, (Transformation) semanticObject); 
				return; 
			case MyDslPackage.VALIDATION_SERVICE:
				sequence_ValidationService(context, (ValidationService) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (errorCode=STRING message=STRING)
	 */
	protected void sequence_BaseException(EObject context, BaseException semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.BASE_EXCEPTION__ERROR_CODE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.BASE_EXCEPTION__ERROR_CODE));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.BASE_EXCEPTION__MESSAGE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.BASE_EXCEPTION__MESSAGE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getBaseExceptionAccess().getErrorCodeSTRINGTerminalRuleCall_1_0(), semanticObject.getErrorCode());
		feeder.accept(grammarAccess.getBaseExceptionAccess().getMessageSTRINGTerminalRuleCall_3_0(), semanticObject.getMessage());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     code=STRING
	 */
	protected void sequence_Block(EObject context, Block semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.BLOCK__CODE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.BLOCK__CODE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getBlockAccess().getCodeSTRINGTerminalRuleCall_0(), semanticObject.getCode());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         createDataModel=[DataModel|ID] 
	 *         createMethod=Block 
	 *         createConclusion=DataModelMethodConclusion 
	 *         findby=INTEGER 
	 *         findMethod=Block 
	 *         findConclusion=DataModelMethodConclusion 
	 *         updateby=INTEGER 
	 *         updateDataModel=[DataModel|ID] 
	 *         updateMethod=Block 
	 *         updateConclusion=DataModelMethodConclusion 
	 *         deleteby=INTEGER 
	 *         deleteMethod=Block 
	 *         exceptions=RestExceptionList?
	 *     )
	 */
	protected void sequence_DataAccessObject(EObject context, DataAccessObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (dataModel=[DataModel|ID] | exceptions+=RestExceptionList)
	 */
	protected void sequence_DataModelMethodConclusion(EObject context, DataModelMethodConclusion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID superType=[DataModel|ID]? id=INTEGER features+=Feature*)
	 */
	protected void sequence_DataModel(EObject context, DataModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (elements+=Type* apis+=RestAPI*)
	 */
	protected void sequence_DomainModel(EObject context, DomainModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID restException=RestException baseException=BaseException)
	 */
	protected void sequence_ExceptionMapper(EObject context, ExceptionMapper semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.EXCEPTION_MAPPER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.EXCEPTION_MAPPER__NAME));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.EXCEPTION_MAPPER__REST_EXCEPTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.EXCEPTION_MAPPER__REST_EXCEPTION));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.EXCEPTION_MAPPER__BASE_EXCEPTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.EXCEPTION_MAPPER__BASE_EXCEPTION));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getExceptionMapperAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getExceptionMapperAccess().getRestExceptionRestExceptionParserRuleCall_3_0(), semanticObject.getRestException());
		feeder.accept(grammarAccess.getExceptionMapperAccess().getBaseExceptionBaseExceptionParserRuleCall_5_0(), semanticObject.getBaseException());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (many?='many'? name=ID type=[Type|ID])
	 */
	protected void sequence_Feature(EObject context, Feature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID transformation+=Transformation*)
	 */
	protected void sequence_ModelMapper(EObject context, ModelMapper semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_PrimitiveType(EObject context, PrimitiveType semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.TYPE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.TYPE__NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getPrimitiveTypeAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         service+=[Service|ID]+ 
	 *         exceptionMapper=[ExceptionMapper|ID] 
	 *         createRestModel=[RestModel|ID] 
	 *         createValService=ValidationService 
	 *         createMethod=Block 
	 *         createConclusion=RestModelMethodConclusion 
	 *         findby=INTEGER 
	 *         findMethod=Block 
	 *         findConclusion=RestModelMethodConclusion 
	 *         updateby=INTEGER 
	 *         updateRestModel=[RestModel|ID] 
	 *         updateValService=ValidationService 
	 *         updateMethod=Block 
	 *         updateConclusion=RestModelMethodConclusion 
	 *         deleteby=INTEGER 
	 *         deleteMethod=Block 
	 *         exception4=RestExceptionList?
	 *     )
	 */
	protected void sequence_Resource(EObject context, Resource semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (resource=Resource service+=Service* dao+=DataAccessObject* exceptionMapper+=ExceptionMapper*)
	 */
	protected void sequence_RestAPI(EObject context, RestAPI semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     exception+=RestException+
	 */
	protected void sequence_RestExceptionList(EObject context, RestExceptionList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (statusCode=RestStatusCode message=STRING)
	 */
	protected void sequence_RestException(EObject context, RestException semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.REST_EXCEPTION__STATUS_CODE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.REST_EXCEPTION__STATUS_CODE));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.REST_EXCEPTION__MESSAGE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.REST_EXCEPTION__MESSAGE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getRestExceptionAccess().getStatusCodeRestStatusCodeEnumRuleCall_1_0(), semanticObject.getStatusCode());
		feeder.accept(grammarAccess.getRestExceptionAccess().getMessageSTRINGTerminalRuleCall_3_0(), semanticObject.getMessage());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (restModel=[RestModel|ID] | exception+=RestExceptionList)
	 */
	protected void sequence_RestModelMethodConclusion(EObject context, RestModelMethodConclusion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID superType=[RestModel|ID]? id=INTEGER features+=Feature* self=STRING)
	 */
	protected void sequence_RestModel(EObject context, RestModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         dao+=[DataAccessObject|ID]+ 
	 *         createDataModel=[DataModel|ID] 
	 *         createMethod=Block 
	 *         createConclusion=DataModelMethodConclusion 
	 *         findby=INTEGER 
	 *         findMethod=Block 
	 *         findConclusion=DataModelMethodConclusion 
	 *         updateby=INTEGER 
	 *         updateDataModel=[DataModel|ID] 
	 *         updateMethod=Block 
	 *         updateConclusion=DataModelMethodConclusion 
	 *         deleteby=INTEGER 
	 *         deleteMethod=Block 
	 *         exception4=RestExceptionList?
	 *     )
	 */
	protected void sequence_Service(EObject context, Service semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (dataModel=[DataModel|ID] restModel=[RestModel|ID])
	 */
	protected void sequence_Transformation(EObject context, Transformation semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.TRANSFORMATION__DATA_MODEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.TRANSFORMATION__DATA_MODEL));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.TRANSFORMATION__REST_MODEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.TRANSFORMATION__REST_MODEL));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getTransformationAccess().getDataModelDataModelIDTerminalRuleCall_1_0_1(), semanticObject.getDataModel());
		feeder.accept(grammarAccess.getTransformationAccess().getRestModelRestModelIDTerminalRuleCall_3_0_1(), semanticObject.getRestModel());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (restModel=[RestModel|ID] block=Block)
	 */
	protected void sequence_ValidationService(EObject context, ValidationService semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.VALIDATION_SERVICE__REST_MODEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.VALIDATION_SERVICE__REST_MODEL));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.VALIDATION_SERVICE__BLOCK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.VALIDATION_SERVICE__BLOCK));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getValidationServiceAccess().getRestModelRestModelIDTerminalRuleCall_2_0_1(), semanticObject.getRestModel());
		feeder.accept(grammarAccess.getValidationServiceAccess().getBlockBlockParserRuleCall_5_0(), semanticObject.getBlock());
		feeder.finish();
	}
}
